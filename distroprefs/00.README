=head1 NAME

  DistroPrefs -- Preferences/Distributions/CPAN

=head1 DESCRIPTION

(Note: distroprefs specifications are still considered alpha. This
manpage will be integrated into the manpage of C<CPAN.pm> as soon as
the content is regarded as mature)

Distributions on the CPAN usually behave according to what we call the
CPAN mantra. Well since the event of Module::Build we have two mantras:

    perl Makefile.PL     perl Build.PL
    make                 ./Build
    make test            ./Build test
    make install         ./Build install

But some modules cannot be built with this mantra. They try to get
some extra data from the user via environment, extra arguments or
interactively thus disturbing the installation of large bundles like
Phalanx100 or modules like Plagger.

The distroprefs system of C<CPAN.pm> addresses this problem by
allowing the user to specify extra informations and recipes in YAML
files to either

=over

=item

pass additional arguments to one of the four commands,

=item

set environment variables

=item

instantiate an Expect object that reads from the console, waits for
some regular expressions and enters some answers

=item

temporarily override assorted C<CPAN.pm> configuration variables

=item

disable the installation of an object altogether

=back

See the YAML files that come with the C<CPAN.pm> distribution in the
C<distroprefs/> directory for examples.

=head1 FILENAMES

The YAML files themselves must have the C<.yml> extension, all other
files are ignored. The containing directory can be specified in
C<CPAN.pm> in the C<prefs_dir> config variable. Try C<o conf init
prefs_dir> in the CPAN shell to set and activate the distroprefs
system.

Every YAML file may contain arbitrary documents according to the YAML
specification and every single document is treated as an entity that
can specify the treatment of a single distribution.

The names of the files can be picked freely, C<CPAN.pm> always reads
all files (in alphabetical order) and takes the key C<match> (see
below in LANGUAGE SPECS) as a hashref containing match criteria that
determine if the current distribution matches the YAML document or
not.

=head2 Fallback Data::Dumper and Storable

If neither your configured C<yaml_module> nor YAML.pm is installed
CPAN.pm falls back to using Data::Dumper and Storable and looks for
files with the extensions C<.dd> or C<.st> in the C<prefs_dir>
directory. These files are expected to contain one or more hashrefs.
For Data::Dumper generated files, this is expected to be done with by
defining C<$VAR1>, C<$VAR2>, etc. The YAML shell would produce these
with the command

    ysh < somefile.yml > somefile.dd

For Storable files the rule is that they must be constructed such that
C<Storable::retrieve(file)> returns an array reference and the array
elements represent one distropref object each. The conversion from
YAML would look like so:

    perl -MYAML=LoadFile -MStorable=nstore -e '
        @y=LoadFile(shift);
        nstore(\@y, shift)' somefile.yml somefile.st

In bootstrapping situations it is usually sufficient to translate only
a few YAML files to Data::Dumper for the crucial modules like
C<YAML::Syck>, C<YAML.pm> and C<Expect.pm>. If you prefer Storable
over Data::Dumper, remember to pull out a Storable version that writes
an older format than all the other Storable versions that will need to
read them.

=head1 BLUEPRINT

The following example contains all supported keywords and structures
with the exception of C<eexpect> which can be used instead of
C<expect>.

  --- 
  comment: "Demo"
  match:
    module: "Dancing::Queen"
    distribution: "^CHACHACHA/Dancing-"
    perl: "/usr/local/cariba-perl/bin/perl"
  disabled: 1
  cpanconfig:
    make: gmake
  pl: 
    args:
      - "--somearg=specialcase"

    env: {}

    expect:
      - "Which is your favorite fruit"
      - "apple\n"

  make: 
    args:
      - all
      - extra-all

    env: {}

    expect: []

    commendline: "echo SKIPPING make"

  test: 
    args: []

    env: {}

    expect: []

  install: 
    args: []

    env:
      WANT_TO_INSTALL: YES

    expect:
      - "Do you really want to install"
      - "y\n"

  patches:
    - "ABCDE/Fedcba-3.14-ABCDE-01.patch"


=head1 LANGUAGE SPECS

Every YAML document represents a single hash reference. The valid keys
in this hash are C<comment>, C<match>, C<disabled>, C<cpanconfig>,
C<pl>, C<make>, C<test>, C<install>, C<patches>. The meanings of these
keywords is as follows:

=over

=item comment [scalar]

A comment

=item cpanconfig [hash]

Temporarily override assorted C<CPAN.pm> configuration variables.

Supported are: C<build_requires_install_policy>, C<check_sigs>,
C<make>, C<make_install_make_command>, C<prefer_installer>,
C<test_report>

=item disabled [boolean]

Specifies that this distribution shall not be processed at all.

=item goto [string]

The canonical name of a delegate distribution that shall be installed
instead. Useful when a new version that, although it tests OK itself,
breaks something else.

=item install [hash]

Processing instructions for the C<make install> or C<./Build install>
phase of the CPAN mantra. See below under I<Processiong Instructions>.

=item make [hash]

Processing instructions for the C<make> or C<./Build> phase of the
CPAN mantra. See below under I<Processiong Instructions>.

=item match [hash]

A hashref with one or more of the keys C<distribution>, C<modules>, or
C<perl> that specify if a document is targeted at a specific CPAN
distribution.

The corresponding values are interpreted as regular expressions. The
C<distribution> related one will be matched against the canonical
distribution name, e.g. "AUTHOR/Foo-Bar-3.14.tar.gz".

The C<module> related one will be matched against I<all> modules
contained in the distribution until one module matches.

The C<perl> related one will be matched against C<$^X>.

If more than one restriction of C<module>, C<distribution>, and
C<perl> is specified, the results of the separately computed match
values must all match. If this is the case then the hashref
represented by the YAML document is returned as the preference
structure for the current distribution.

=item patches [array]

An array of patches on CPAN or on the local disk to be applied in
order via the external patch program. If the value for the C<-p>
parameter is C<0> or C<1> is determined by reading the patch
beforehand.

=item pl [hash]

Processing instructions for the C<perl Makefile.PL> or C<perl
Build.PL> phase of the CPAN mantra. See below under I<Processiong
Instructions>.

=item test [hash]

Processing instructions for the C<make test> or C<./Build test> phase
of the CPAN mantra. See below under I<Processiong Instructions>.

=back

=head2 Processing Instructions

=over

=item args [array]

Arguments to be added to the command line

=item commandline

A full commandline that will be executed as it stands by a system
call. During the execution the environment variable PERL will is set
to $^X.

=item eexpect [hash]

Extended C<expect>. This is a hash reference with three allowed keys,
C<mode>, C<timeout>, and C<talk>.

C<mode> may have the values C<deterministic> for the case where all
questions come in the order written down and C<anyorder> for the case
where the questions may come in any order. The default mode is
C<deterministic>.

C<timeout> denotes a timeout in seconds. Floating point timeouts are
OK. In the case of a C<mode=deterministic> the timeout denotes the
timeout per question, in the case of C<mode=anyorder> it denotes the
timeout per byte received from the stream or questions.

C<talk> is a reference to an array that contains alternating questions
and answers. Questions are regular expressions and answers are literal
strings. The Expect module will then watch the stream coming from the
execution of the external program (C<perl Makefile.PL>, C<perl
Build.PL>, C<make>, etc.).

In the case of C<mode=deterministic> the CPAN.pm will inject the
according answer as soon as the stream matches the regular expression.
In the case of C<mode=anyorder> the CPAN.pm will answer a question as
soon as the timeout is reached for the next byte in the input stream.
In the latter case it removes the according question/answer pair from
the array, so if you want to answer the question C<Do you really want
to do that> several times, then it must be included in the array at
least as often as you want this answer to be given.

=item env [hash]

Environment variables to be set during the command

=item expect [array]

C<< expect: <array> >> is a short notation for

  eexpect:
    mode: deterministic
    timeout: 15
    talk: <array>

=back

=head1 DEALING WITH PATCHES

My procedure when I encounter a broken package:

    look DISTRO
    cd ..
    rsync -va DISTRODIR/ DISTRODIR.orig/
    # fix the distro in DISTRODIR
    diff -urp DISTRODIR.orig DISTRODIR > DISTRODIR-ANDK-01.patch
    gzip DISTRODIR-ANDK-01.patch

I then upload the resulting patch to my CPAN patches/ directory and
write a YAML file into my prefs_dir/ directory that contains roughly

    ---
    comment: "This patch fixes ..."
    match:
      distribution: "^DISTRO$"

    patches:
      - ANDK/patches/DISTRODIR-ANDK-01.patch

That's all. From then I can install that distro for any perl version
on that machine.

=head1 EXAMPLE FILES

C<CPAN.pm> comes with a collection of example YAML files. Note that these
are really just examples and should not be used without care because
they cannot fit everybody's purpose. After all the authors of the
packages that ask questions had a need to ask, so you should watch
their questions and adjust the examples to your environment and your
needs. You have beend warned:-)

=head1 BUGS

Please report interesting improvements you apply to these files. Any
additions and corrections are welcome. Also, please be aware that
there are many areas of this system that need further attention and
are not yet working as one would expect or hope.

Please use the
L<http://rt.cpan.org/Dist/Display.html?Status=Active&Queue=CPAN>
address to report any bugs and wishes. Thank you!

=cut

# Local Variables:
# mode: cperl
# cperl-indent-level: 4
# End:
